{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MIQA Documentation MIQA (Medical Image Quality Assurance) is a tool for medical researchers that work with digital medical scans. Medical imaging is subject to many variables, so an important part of conducting research with these images is quality assurance. The review process involved in quality assurance can sometimes be laborious for large sets of images, requiring multiple reviewers to sort through the sets. MIQA is built to streamline the workflow of the reviewers, making it easier to mark images as \u201cusable\u201d or not. It is also built to be collaborative with a two-tier review flow and annotation features including in-app tags and comments and sending email to coordinate reviews. The tool also includes insights from automatic image evaluations provided by neural networks which have been trained to detect scan anomalies. This documentation includes a user guide and an administrator guide. The user guide will explain features of MIQA for the end user wishing to participate in image reviews for an institution or research effort that already has MIQA set up by an administrator. If you do not have an instance of MIQA available to you, you will need to set one up by following the administrator guide.","title":"Home"},{"location":"#miqa-documentation","text":"MIQA (Medical Image Quality Assurance) is a tool for medical researchers that work with digital medical scans. Medical imaging is subject to many variables, so an important part of conducting research with these images is quality assurance. The review process involved in quality assurance can sometimes be laborious for large sets of images, requiring multiple reviewers to sort through the sets. MIQA is built to streamline the workflow of the reviewers, making it easier to mark images as \u201cusable\u201d or not. It is also built to be collaborative with a two-tier review flow and annotation features including in-app tags and comments and sending email to coordinate reviews. The tool also includes insights from automatic image evaluations provided by neural networks which have been trained to detect scan anomalies. This documentation includes a user guide and an administrator guide. The user guide will explain features of MIQA for the end user wishing to participate in image reviews for an institution or research effort that already has MIQA set up by an administrator. If you do not have an instance of MIQA available to you, you will need to set one up by following the administrator guide.","title":"MIQA Documentation"},{"location":"admin/","text":"The role of the administrator For any organization wishing to use MIQA to augment their workflow, an individual or group of individuals must take on the responsibility of managing the organization\u2019s MIQA instance. The administrator(s) will need some experience with using a server command line and must be prepared to upkeep the site, database, and users. This guide is intended to offer advice to administrators as they create and manage an instance of MIQA for their organization. Superuser privileges The administrator will have a superuser account in their MIQA instance in order to accomplish this setup. This means that they will have unrestricted access to the system and database. As a result, care should be taken in the selection of administrators. They will be able to see and edit all projects, experiments, scans, etc. in MIQA; project access control does not apply to them.","title":"Introduction"},{"location":"admin/#the-role-of-the-administrator","text":"For any organization wishing to use MIQA to augment their workflow, an individual or group of individuals must take on the responsibility of managing the organization\u2019s MIQA instance. The administrator(s) will need some experience with using a server command line and must be prepared to upkeep the site, database, and users. This guide is intended to offer advice to administrators as they create and manage an instance of MIQA for their organization.","title":"The role of the administrator"},{"location":"admin/#superuser-privileges","text":"The administrator will have a superuser account in their MIQA instance in order to accomplish this setup. This means that they will have unrestricted access to the system and database. As a result, care should be taken in the selection of administrators. They will be able to see and edit all projects, experiments, scans, etc. in MIQA; project access control does not apply to them.","title":"Superuser privileges"},{"location":"console/","text":"With a superuser account, an administrator can access the Django admin console as a trusted user. This interface allows the administrator to view and edit any object in the database. To access the admin console, simply navigate to the /admin route of MIQA in your browser. For a deployed instance, this url may look like the following: https://miqa.organization.org/admin. An admin can log in with the same credentials as on the main site. This interface can act as a debugging method or a quick way to create, delete, or modify objects. Doing this often is not recommended; it is safer to complete such database transactions through the main MIQA interface. However, an administrator should still know about the existence of this option.","title":"The Django Admin Console"},{"location":"imports/","text":"There are two ways to bring data into MIQA. The first way is uploading scans from your local computer through the MIQA web interface (see User Guide Projects homepage for details). The second way is a system of exports and imports that catalog and refresh (respectively) the state of a project. Import files and export files reference image files on the server machine for which MIQA should save representational objects. Before writing import files for your MIQA projects, it is important to understand the organization of certain objects in MIQA. Refer to the User Guide explanation of projects to better understand the relationships between projects, experiments, scans, and frames. Each project in MIQA has an import_path and an export_path . Since these attributes affect the behavior of imports and exports, editing these paths for a project is a privilege reserved for superusers and the creators of projects. An import/export path is a string containing one of the following options: An absolute path of a csv or json file on the server machine . The path must exist for an import file so that file can be read. For an export file, at least the parent folder must exist so the file can be written at that path. All file references within the import file can be absolute paths of the same form OR paths relative to the parent folder. See the description of the file_location attribute . A URL referencing a csv or json file that exists on Amazon S3 . The string must be of the form s3://[bucket_name]/[key_name].[csv|json] . All of the file references within the import file must be of the same form. See the description of the file_location attribute ; all values for file locations should be S3 URLS. As the system administrator for your instance of MIQA, you will be responsible for the content and maintenance of server files so that normal users may successfully perform imports and exports in the application. You are responsible for ensuring that these files are accessible to the server (by location and permission settings). If you are running MIQA through docker-compose , you will need to specify an environment variable SAMPLES_DIR as a directory containing any absolute file paths you wish to access from the server. For example, the command export SAMPLES_DIR=/home/user/miqa_files/ would mount the entire miqa_files directory to the server container and make those files available via the same absolute paths. A project import will read the contents of the file at the referenced import_path , interpret that data as objects, and save those objects within the target project. An import will overwrite the current state of the project, so this operation should be performed with caution. An export will overwrite the contents of the file at the referenced export_path or create a new file at that location if it does not exist. The data written by an export operation will record the current state of the project, including experiments, scans, frames, and the last decision made for each scan. The data written by the export operation is in the same format as what the import operation ingests, so it may be useful for the import and export paths for a project to be the same. In that case, an export operation would save the state of the project and an import operation would refresh that state (although any scan decisions made prior to the last decision would be lost). Adding lines to the import file before importing would add new content to the project. Import/export file formats The import and export files must be in either a CSV or JSON format. Below are exact specifications and explanations for the two formats. Since only the import files are written by the administrator, these formats are explained in the context of writing import files; export files will be written in the same formats by the server. When writing an import file, these attributes are expected (although only the first six are required). Read the descriptions of these attributes, then see the following sections, Import CSVs and Import JSONs , to learn how to format these values. 1. Project name. Required. In a CSV for just one project, this value should be the same for all rows in the file below the header row. This should specify the name of the project to which the Frame in this row belongs. In most cases, this is an assurance that the file is being used by the proper project. However, it is also possible to use this format to specify the objects to create in multiple projects at once, in which case the rows may have different values for project_name (see Global imports and exports). 2. Experiment name. Required. Each row specifies a Frame that belongs to a Scan, which belongs to an Experiment. This column allows you to specify the experiment-level organization by specifying an experiment name for each Frame. You will likely have the same value repeated often in this column, since multiple scans are often organized into a single experiment.. 3. Scan name. Required. Each row specifies a Frame that belongs to a Scan. This column allows you to specify the scan-level organization by specifying a scan name for each Frame. You will likely have repeating values in this column. 4. Scan type. Required. For each unique value in the scan_name column, some additional information about the Scan object should be supplied. The only required additional scan attribute is the scan_type . Other additional scan attributes can be found in columns 12-14. The scan type may be one of \"T1\", \"T2\", \"FMRI\", \"MRA\", \"PD\", \"DTI\", \"DWI\", or any of the ncanda-specific scan types (see miqa.core.models.scan for more). 5. Frame number. Required. Since each row specifies a Frame belonging to a Scan in the Project, and multiple Frames can belong to a single Scan, you may specify an order for the Frames in a Scan. The frame_number column should contain a unique integer for each Frame in the same Scan object. If only one Frame exists in a Scan, the frame_number value can simply be set to 0. 6. File location. Required. This column\u2019s value should contain the file path of / URL to the image file to associate with this row\u2019s Frame object. An image file should be of the types .nii.gz , .nii , .mgz , or .nrrd . 7. Experiment Notes. This is an optional additional attribute of an Experiment which may be specified in the CSV. This field should contain any additional text you would like to associate with an experiment. 8. Subject ID. This is an optional additional attribute of a Scan which may be specified in the CSV. This field is stored as a string and may be a number or any other alphanumeric identifier your organization may have for scan subjects, up to 255 characters long. This value is stored in MIQA and displayed on the user interface when a scan is being reviewed. These values do not have to be unique, as multiple scans can belong to a single subject. 9. Session ID. This is an optional additional attribute of a Scan which may be specified in the CSV. This field is stored as a string and may be a number or any other alphanumeric identifier your organization may have for session IDs, up to 255 characters long. This value is stored in MIQA and displayed on the user interface when a scan is being reviewed. These values do not have to be unique, as multiple scans can belong to a single subject. 10. Scan link. This is an optional additional attribute of a Scan which may be specified in the CSV. As such, for each unique value in the scan_name column, a new value may be supplied in this column. This value should be a URL that directs to an external site where more information about that scan can be found. This link will be used in the MIQA control panel as a hyperlink on the text of the scan\u2019s name. 11. Last decision. As MIQA is a tool to make decisions about the usability of scans, the import/export file formats include the ability to record the last decision made on a scan. This is to enable import/export cycles where the state of a project may be saved to an export file and later redigested by the system as an import file. It is not likely that you will be writing these column values yourself, rather reading these values as the result of what the export writes. These values will be one of the following: U for \u201cusable\u201d, UN for \u201cunusable\u201d, Q? for \u201cquestionable\u201d, or UE for \u201cusable-extra\u201d. If this column does not have a value for a given row, columns 12-16 will have no value either. 12. Last decision creator. This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 12 specifies the user that submitted that decision. 13. Last decision note. This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 13 supplies any note that the user submitted alongside the decision. 14. Last decision creation datetime. This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 14 supplies the datetime on the server when the decision was submitted. 15. Identified artifacts. This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 15 supplies the list of artifacts identified as present in the scan when the decision was submitted. This list will be separated by semicolons to differentiate between the column separator , . 16. Location of interest. This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 16 supplies a three-dimensional coordinate which specifies a location of interest when the decision was submitted (or at least, what the user was looking at when they made the decision). These coordinates are slices within the three dimensional image and may be read by the MIQA webapp to bring another user to that location in the image. If a decision has a saved location of interest, a crosshair pointer icon will appear next to it in the control panel. Clicking this icon will snap the current user\u2019s viewer to that slice location in the image. Import CSVs If your project\u2019s import file is written in a CSV format, it should contain a header row; any following rows will represent Frame objects within the Project. Each Frame object in the Project represents a single image file. A Scan is a collection of associated Frames, and an Experiment is a collection of associated Scans. The import CSV format contains fourteen possible columns to specify things about the Frame or the Scan to which it belongs. Only the first six columns are required. Below is a list of the columns and the explanations for each. In the case that you only specify the required columns in your import CSV, your file may look something like this table: project_name experiment_name scan_name scan_type frame_number file_location My Project Experiment 1 Scan A T1 1 my_project/experiment_1/scan_a/file_1.nii.gz My Project Experiment 1 Scan A T1 2 my_project/experiment_1/scan_a/file_2.nii.gz My Project Experiment 1 Scan B T1 0 my_project/experiment_1/scan_b/file_0.nii.gz My Project Experiment 2 Scan C T2 0 my_project/experiment_2/scan_c/file_0.nii.gz In the case that you provide optional columns 7-10, those columns would look something like this (for the same rows as the above table). \u2026 experiment_notes subject_id session_id scan_link \u2026 Experiment 1 Notes! sub_one ses_one https://my-org.org/scans/1 \u2026 Experiment 1 Notes! sub_one ses_one https://my-org.org/scans/1 \u2026 Experiment 1 Notes! sub_one ses_two https://my-org.org/scans/2 \u2026 Experiment 2 Notes! sub_two ses_one https://my-org.org/scans/3 After importing this version and making some decisions on these scans in MIQA, you may export the project and see optional columns 11-16 added to what you supplied. Those newly added columns would look something like this (for the same rows as the tables above). \u2026 last_decision last_decision_creator last_decision_note last_decision_created identified_artifacts location_of_interest \u2026 U me@my-org.org 2022-01-01 13:44:34 normal_variants;lesions i=-45.504;j=-20.451;k=15.50 \u2026 U me@my-org.org 2022-01-01 13:44:34 normal_variants;lesions i=-45.504;j=-20.451;k=15.50 \u2026 UN me@my-org.org This scan is misaligned and doesn\u2019t cover the whole brain 2022-01-02 09:04:22 misalignment;partial_coverage i=-2.669;j=-61.718;k=-48.763 \u2026 Q? me@my-org.org There may be some ghosting motion in this scan 2022-01-02 14:02:57 ghosting_motion i=50.305;j=-40.541;k=-30 Import JSONs The information specified in the CSV format can also be specified in a JSON format. This may be more convenient/readable in the case that many frames are nested in each scan. Rather than repeating values of scan attributes for every row describing frames in that scan, the JSON format allows you to specify those scan attributes once at the scan level and specify frames in a subsequent mapping. The example JSON below is a translation of the example CSV in the above tables to the JSON format. { \"projects\": { \"My Project\": { \"experiments\": { \"Experiment One\": { \"notes\": \"Experiment 1 Notes!\", \"scans\": { \"Scan A\": { \"type\": \"T1\", \"subject_id\": \"sub_one\", \"session_id\": \"ses_one\", \"scan_link\": \"https://my-org.org/scans/1\", \"frames\": { \"1\": { \"file_location\": \"my_project/experiment_1/scan_a/file_1.nii.gz\" }, \"2\": { \"file_location\": \"my_project/experiment_1/scan_a/file_2.nii.gz\" } }, \"last_decision\": { \"decision\": \"U\", \"creator\": \"me@my-org.org\", \"note\": \"\", \"created\": \"2022-01-01 13:44:34\", \"user_identified_artifacts\": \"normal_variants;lesions\", \"location\": \"i=-45.504;j=-20.451;k=15.50\" } }, \"Scan B\": { \"type\": \"T1\", \"subject_id\": \"sub_one\", \"session_id\": \"ses_two\", \"scan_link\": \"https://my-org.org/scans/2\", \"frames\": { \"0\": { \"file_location\": \"my_project/experiment_1/scan_b/file_0.nii.gz\" } }, \"last_decision\": { \"decision\": \"UN\", \"creator\": \"me@my-org.org\", \"note\": \"This scan is misaligned and doesn't cover the whole brain\", \"created\": \"2022-01-02 09:04:22\", \"user_identified_artifacts\": \"misalignment;partial_coverage\", \"location\": \"i=-2.669;j=-61.718;k=-48.763\" } } } }, \"Experiment Two\": { \"notes\": \"Experiment 2 Notes!\", \"scans\": { \"Scan C\": { \"type\": \"T2\", \"subject_id\": \"sub_two\", \"session_id\": \"ses_one\", \"scan_link\": \"https://my-org.org/scans/3\", \"frames\": { \"0\": { \"file_location\": \"my_project/experiment_2/scan_c/file_0.nii.gz\" } }, \"last_decision\": { \"decision\": \"Q?\", \"creator\": \"me@my-org.org\", \"note\": \"There may be some ghosting motion in this scan \", \"created\": \"2022-01-02 14:02:57\", \"user_identified_artifacts\": \"ghosting_motion\", \"location\": \"i=50.305;j=-40.541;k=-30\" } } } } } } } } Global imports and exports As an administrator, there is one more important feature to imports and exports of which you should be aware. Any import or export file has the flexibility to specify the contents of more than one project (hence the project_name column in the CSV format and top-level projects mapping in the JSON format). With global imports/exports, multiple projects can be imported/exported at once. Only superusers have permission to perform global imports and exports. As a superuser, the Projects homepage will have an additional button at the bottom, \u201cGlobal import/export\u201d. Clicking this button will open an interface that is similar to a project configuration, except only the import/export component is visible. You may specify and save the global import and export paths. These values, just like project import and export paths, should be absolute file paths referencing existing files on the server machine. After saving these values, clicking \u201cImport\u201d will overwrite the states of all projects listed in the file with the objects (experiments, scans, frames, and decisions) specified in the file for that project. This action may be destructive of the states of multiple projects, so it should be used with caution. Global exports, however, are non-destructive. Clicking \u201cExport\u201d will write the current states of all projects to the specified global export path. Just like project imports and exports, the output of the export can be used as the input of the import. It is recommended that you save the states of all projects with the global export before performing any global imports.","title":"Imports and Exports"},{"location":"imports/#importexport-file-formats","text":"The import and export files must be in either a CSV or JSON format. Below are exact specifications and explanations for the two formats. Since only the import files are written by the administrator, these formats are explained in the context of writing import files; export files will be written in the same formats by the server. When writing an import file, these attributes are expected (although only the first six are required). Read the descriptions of these attributes, then see the following sections, Import CSVs and Import JSONs , to learn how to format these values.","title":"Import/export file formats"},{"location":"imports/#1-project-name-required","text":"In a CSV for just one project, this value should be the same for all rows in the file below the header row. This should specify the name of the project to which the Frame in this row belongs. In most cases, this is an assurance that the file is being used by the proper project. However, it is also possible to use this format to specify the objects to create in multiple projects at once, in which case the rows may have different values for project_name (see Global imports and exports).","title":"1. Project name. Required."},{"location":"imports/#2-experiment-name-required","text":"Each row specifies a Frame that belongs to a Scan, which belongs to an Experiment. This column allows you to specify the experiment-level organization by specifying an experiment name for each Frame. You will likely have the same value repeated often in this column, since multiple scans are often organized into a single experiment..","title":"2.  Experiment name. Required."},{"location":"imports/#3-scan-name-required","text":"Each row specifies a Frame that belongs to a Scan. This column allows you to specify the scan-level organization by specifying a scan name for each Frame. You will likely have repeating values in this column.","title":"3.  Scan name. Required."},{"location":"imports/#4-scan-type-required","text":"For each unique value in the scan_name column, some additional information about the Scan object should be supplied. The only required additional scan attribute is the scan_type . Other additional scan attributes can be found in columns 12-14. The scan type may be one of \"T1\", \"T2\", \"FMRI\", \"MRA\", \"PD\", \"DTI\", \"DWI\", or any of the ncanda-specific scan types (see miqa.core.models.scan for more).","title":"4.  Scan type. Required."},{"location":"imports/#5-frame-number-required","text":"Since each row specifies a Frame belonging to a Scan in the Project, and multiple Frames can belong to a single Scan, you may specify an order for the Frames in a Scan. The frame_number column should contain a unique integer for each Frame in the same Scan object. If only one Frame exists in a Scan, the frame_number value can simply be set to 0.","title":"5.  Frame number. Required."},{"location":"imports/#6-file-location-required","text":"This column\u2019s value should contain the file path of / URL to the image file to associate with this row\u2019s Frame object. An image file should be of the types .nii.gz , .nii , .mgz , or .nrrd .","title":"6.  File location. Required."},{"location":"imports/#7-experiment-notes","text":"This is an optional additional attribute of an Experiment which may be specified in the CSV. This field should contain any additional text you would like to associate with an experiment.","title":"7. Experiment Notes."},{"location":"imports/#8-subject-id","text":"This is an optional additional attribute of a Scan which may be specified in the CSV. This field is stored as a string and may be a number or any other alphanumeric identifier your organization may have for scan subjects, up to 255 characters long. This value is stored in MIQA and displayed on the user interface when a scan is being reviewed. These values do not have to be unique, as multiple scans can belong to a single subject.","title":"8.  Subject ID."},{"location":"imports/#9-session-id","text":"This is an optional additional attribute of a Scan which may be specified in the CSV. This field is stored as a string and may be a number or any other alphanumeric identifier your organization may have for session IDs, up to 255 characters long. This value is stored in MIQA and displayed on the user interface when a scan is being reviewed. These values do not have to be unique, as multiple scans can belong to a single subject.","title":"9.  Session ID."},{"location":"imports/#10-scan-link","text":"This is an optional additional attribute of a Scan which may be specified in the CSV. As such, for each unique value in the scan_name column, a new value may be supplied in this column. This value should be a URL that directs to an external site where more information about that scan can be found. This link will be used in the MIQA control panel as a hyperlink on the text of the scan\u2019s name.","title":"10.  Scan link."},{"location":"imports/#11-last-decision","text":"As MIQA is a tool to make decisions about the usability of scans, the import/export file formats include the ability to record the last decision made on a scan. This is to enable import/export cycles where the state of a project may be saved to an export file and later redigested by the system as an import file. It is not likely that you will be writing these column values yourself, rather reading these values as the result of what the export writes. These values will be one of the following: U for \u201cusable\u201d, UN for \u201cunusable\u201d, Q? for \u201cquestionable\u201d, or UE for \u201cusable-extra\u201d. If this column does not have a value for a given row, columns 12-16 will have no value either.","title":"11.  Last decision."},{"location":"imports/#12-last-decision-creator","text":"This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 12 specifies the user that submitted that decision.","title":"12.  Last decision creator."},{"location":"imports/#13-last-decision-note","text":"This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 13 supplies any note that the user submitted alongside the decision.","title":"13.  Last decision note."},{"location":"imports/#14-last-decision-creation-datetime","text":"This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 14 supplies the datetime on the server when the decision was submitted.","title":"14.  Last decision creation datetime."},{"location":"imports/#15-identified-artifacts","text":"This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 15 supplies the list of artifacts identified as present in the scan when the decision was submitted. This list will be separated by semicolons to differentiate between the column separator , .","title":"15.  Identified artifacts."},{"location":"imports/#16-location-of-interest","text":"This column value will only exist when column 11 has a value. If a scan had some decision(s) made about its usability, the last one will be recorded in the last 6 columns. Column 16 supplies a three-dimensional coordinate which specifies a location of interest when the decision was submitted (or at least, what the user was looking at when they made the decision). These coordinates are slices within the three dimensional image and may be read by the MIQA webapp to bring another user to that location in the image. If a decision has a saved location of interest, a crosshair pointer icon will appear next to it in the control panel. Clicking this icon will snap the current user\u2019s viewer to that slice location in the image.","title":"16.  Location of interest."},{"location":"imports/#import-csvs","text":"If your project\u2019s import file is written in a CSV format, it should contain a header row; any following rows will represent Frame objects within the Project. Each Frame object in the Project represents a single image file. A Scan is a collection of associated Frames, and an Experiment is a collection of associated Scans. The import CSV format contains fourteen possible columns to specify things about the Frame or the Scan to which it belongs. Only the first six columns are required. Below is a list of the columns and the explanations for each. In the case that you only specify the required columns in your import CSV, your file may look something like this table: project_name experiment_name scan_name scan_type frame_number file_location My Project Experiment 1 Scan A T1 1 my_project/experiment_1/scan_a/file_1.nii.gz My Project Experiment 1 Scan A T1 2 my_project/experiment_1/scan_a/file_2.nii.gz My Project Experiment 1 Scan B T1 0 my_project/experiment_1/scan_b/file_0.nii.gz My Project Experiment 2 Scan C T2 0 my_project/experiment_2/scan_c/file_0.nii.gz In the case that you provide optional columns 7-10, those columns would look something like this (for the same rows as the above table). \u2026 experiment_notes subject_id session_id scan_link \u2026 Experiment 1 Notes! sub_one ses_one https://my-org.org/scans/1 \u2026 Experiment 1 Notes! sub_one ses_one https://my-org.org/scans/1 \u2026 Experiment 1 Notes! sub_one ses_two https://my-org.org/scans/2 \u2026 Experiment 2 Notes! sub_two ses_one https://my-org.org/scans/3 After importing this version and making some decisions on these scans in MIQA, you may export the project and see optional columns 11-16 added to what you supplied. Those newly added columns would look something like this (for the same rows as the tables above). \u2026 last_decision last_decision_creator last_decision_note last_decision_created identified_artifacts location_of_interest \u2026 U me@my-org.org 2022-01-01 13:44:34 normal_variants;lesions i=-45.504;j=-20.451;k=15.50 \u2026 U me@my-org.org 2022-01-01 13:44:34 normal_variants;lesions i=-45.504;j=-20.451;k=15.50 \u2026 UN me@my-org.org This scan is misaligned and doesn\u2019t cover the whole brain 2022-01-02 09:04:22 misalignment;partial_coverage i=-2.669;j=-61.718;k=-48.763 \u2026 Q? me@my-org.org There may be some ghosting motion in this scan 2022-01-02 14:02:57 ghosting_motion i=50.305;j=-40.541;k=-30","title":"Import CSVs"},{"location":"imports/#import-jsons","text":"The information specified in the CSV format can also be specified in a JSON format. This may be more convenient/readable in the case that many frames are nested in each scan. Rather than repeating values of scan attributes for every row describing frames in that scan, the JSON format allows you to specify those scan attributes once at the scan level and specify frames in a subsequent mapping. The example JSON below is a translation of the example CSV in the above tables to the JSON format. { \"projects\": { \"My Project\": { \"experiments\": { \"Experiment One\": { \"notes\": \"Experiment 1 Notes!\", \"scans\": { \"Scan A\": { \"type\": \"T1\", \"subject_id\": \"sub_one\", \"session_id\": \"ses_one\", \"scan_link\": \"https://my-org.org/scans/1\", \"frames\": { \"1\": { \"file_location\": \"my_project/experiment_1/scan_a/file_1.nii.gz\" }, \"2\": { \"file_location\": \"my_project/experiment_1/scan_a/file_2.nii.gz\" } }, \"last_decision\": { \"decision\": \"U\", \"creator\": \"me@my-org.org\", \"note\": \"\", \"created\": \"2022-01-01 13:44:34\", \"user_identified_artifacts\": \"normal_variants;lesions\", \"location\": \"i=-45.504;j=-20.451;k=15.50\" } }, \"Scan B\": { \"type\": \"T1\", \"subject_id\": \"sub_one\", \"session_id\": \"ses_two\", \"scan_link\": \"https://my-org.org/scans/2\", \"frames\": { \"0\": { \"file_location\": \"my_project/experiment_1/scan_b/file_0.nii.gz\" } }, \"last_decision\": { \"decision\": \"UN\", \"creator\": \"me@my-org.org\", \"note\": \"This scan is misaligned and doesn't cover the whole brain\", \"created\": \"2022-01-02 09:04:22\", \"user_identified_artifacts\": \"misalignment;partial_coverage\", \"location\": \"i=-2.669;j=-61.718;k=-48.763\" } } } }, \"Experiment Two\": { \"notes\": \"Experiment 2 Notes!\", \"scans\": { \"Scan C\": { \"type\": \"T2\", \"subject_id\": \"sub_two\", \"session_id\": \"ses_one\", \"scan_link\": \"https://my-org.org/scans/3\", \"frames\": { \"0\": { \"file_location\": \"my_project/experiment_2/scan_c/file_0.nii.gz\" } }, \"last_decision\": { \"decision\": \"Q?\", \"creator\": \"me@my-org.org\", \"note\": \"There may be some ghosting motion in this scan \", \"created\": \"2022-01-02 14:02:57\", \"user_identified_artifacts\": \"ghosting_motion\", \"location\": \"i=50.305;j=-40.541;k=-30\" } } } } } } } }","title":"Import JSONs"},{"location":"imports/#global-imports-and-exports","text":"As an administrator, there is one more important feature to imports and exports of which you should be aware. Any import or export file has the flexibility to specify the contents of more than one project (hence the project_name column in the CSV format and top-level projects mapping in the JSON format). With global imports/exports, multiple projects can be imported/exported at once. Only superusers have permission to perform global imports and exports. As a superuser, the Projects homepage will have an additional button at the bottom, \u201cGlobal import/export\u201d. Clicking this button will open an interface that is similar to a project configuration, except only the import/export component is visible. You may specify and save the global import and export paths. These values, just like project import and export paths, should be absolute file paths referencing existing files on the server machine. After saving these values, clicking \u201cImport\u201d will overwrite the states of all projects listed in the file with the objects (experiments, scans, frames, and decisions) specified in the file for that project. This action may be destructive of the states of multiple projects, so it should be used with caution. Global exports, however, are non-destructive. Clicking \u201cExport\u201d will write the current states of all projects to the specified global export path. Just like project imports and exports, the output of the export can be used as the input of the import. It is recommended that you save the states of all projects with the global export before performing any global imports.","title":"Global imports and exports"},{"location":"integration/","text":"Since MIQA offers two options for bringing images into a project, it is a flexible tool that may act as either a part of or replacement for your current workflow. Setting up MIQA as a primary image repository In the case that your organization does not have an existing tool for storing, sharing, or organizing scans or your organization is looking for a replacement tool, MIQA can act as a standalone database for your information. In this case, using the import/export feature is optional, and should only be used in the case that images are regularly saved on the server machine and need to be added to the database. Otherwise, your team can simply use the \u201cUpload Scans\u201d feature in the MIQA interface to add images to a project from any machine. Integrating MIQA with an existing image repository Your organization may already have a tool for storing, sharing, and organizing scans that is only lacking a viewer or annotation features. MIQA can work together with your existing repository with a system of imports and exports that keeps the information in the two databases synced. In this case, it is recommended that each project that should be synced uses the same path for the import file and export file, and scheduled jobs on the server machine can be used to complete the following cycle at regular intervals: Use the MIQA API to perform an export of the project\u2019s current state to the import/export file Make a copy of the export file and move it to a backup location Use the API of your primary image repository to sync new changes written in the import/export file (i.e. decisions on scans saved since the last sync) Use the API of your primary image repository to download any new images in the project Write the new images as new frame rows in the import/export file Use the MIQA API to perform an import of the project\u2019s refreshed state to sync the two databases Some caveats to this approach should be noted: With regular import/export cycles, some saved decisions may be lost, since an export only records the last decision saved. Any decisions saved prior will not be included in the refreshed project state. Images added to the project via the \u201cUpload Scans\u201d feature in the MIQA interface are not stored on the server machine, so exports of these scans are not yet supported. Since these scans cannot be exported, they will be lost in the refreshed project state. Accessing the MIQA API MIQA uses a package called django-oauth-toolkit for its authentication backend. You may wish to access the MIQA API with curl , python , or some other request-making library. As an example, here is how you may make a simple authorized request to the MIQA API: import requests from getpass import getpass base_url = \"https://<MIQA_BASE_URL>/api/v1\" headers = { \"Accept\": \"application/json\", } def login(): print(\"Logging in...\") username = input(\"MIQA username: \") password = getpass(\"MIQA password: \") auth_url = base_url.replace(\"/api/v1\", \"/api-token-auth/\") resp = requests.post( auth_url, data={ \"username\": username, \"password\": password, }, ) if resp.status_code != 200: raise Exception(\"Invalid username or password provided\") token = resp.json()[\"token\"] headers[\"Authorization\"] = f\"Token {token}\" login() content = requests.get(f\"{base_url}/users\", headers=headers) print(content.json()) We are considering options to provide access to the MIQA API from command line clients or alternative programming interfaces, such as Jupyter notebooks. This document will be updated as these options mature. Additional MIQA Capabilities If MIQA is close to what your institution needs for its workflow, but some features need adjustment, please contact the MIQA team to discuss customization options. The current state of this document only reflects the needs of MIQA customers so far, but ideas for expansion and enhancements, some of which may apply to your own situation, have been discussed. It is possible to use an alternative vocabulary for scan decision options and artifact options. With custom artifacts, the MIQA neural network would need to be retrained for scan evaluations. MIQA may be repurposed for training a neural network for other kinds of image classification; reviewers can provide manual labeling of large image datasets and those labels can be supplied as ground-truths for the neural network. Managing multiple users allows a small team of coordinating physicians to interact together, and the email features improve the team\u2019s ability to address complicated cases. If your institution has more specific requirements for collaboration, MIQA can be expanded to include such features.","title":"Integrating MIQA in your workflow"},{"location":"integration/#setting-up-miqa-as-a-primary-image-repository","text":"In the case that your organization does not have an existing tool for storing, sharing, or organizing scans or your organization is looking for a replacement tool, MIQA can act as a standalone database for your information. In this case, using the import/export feature is optional, and should only be used in the case that images are regularly saved on the server machine and need to be added to the database. Otherwise, your team can simply use the \u201cUpload Scans\u201d feature in the MIQA interface to add images to a project from any machine.","title":"Setting up MIQA as a primary image repository"},{"location":"integration/#integrating-miqa-with-an-existing-image-repository","text":"Your organization may already have a tool for storing, sharing, and organizing scans that is only lacking a viewer or annotation features. MIQA can work together with your existing repository with a system of imports and exports that keeps the information in the two databases synced. In this case, it is recommended that each project that should be synced uses the same path for the import file and export file, and scheduled jobs on the server machine can be used to complete the following cycle at regular intervals: Use the MIQA API to perform an export of the project\u2019s current state to the import/export file Make a copy of the export file and move it to a backup location Use the API of your primary image repository to sync new changes written in the import/export file (i.e. decisions on scans saved since the last sync) Use the API of your primary image repository to download any new images in the project Write the new images as new frame rows in the import/export file Use the MIQA API to perform an import of the project\u2019s refreshed state to sync the two databases Some caveats to this approach should be noted: With regular import/export cycles, some saved decisions may be lost, since an export only records the last decision saved. Any decisions saved prior will not be included in the refreshed project state. Images added to the project via the \u201cUpload Scans\u201d feature in the MIQA interface are not stored on the server machine, so exports of these scans are not yet supported. Since these scans cannot be exported, they will be lost in the refreshed project state.","title":"Integrating MIQA with an existing image repository"},{"location":"integration/#accessing-the-miqa-api","text":"MIQA uses a package called django-oauth-toolkit for its authentication backend. You may wish to access the MIQA API with curl , python , or some other request-making library. As an example, here is how you may make a simple authorized request to the MIQA API: import requests from getpass import getpass base_url = \"https://<MIQA_BASE_URL>/api/v1\" headers = { \"Accept\": \"application/json\", } def login(): print(\"Logging in...\") username = input(\"MIQA username: \") password = getpass(\"MIQA password: \") auth_url = base_url.replace(\"/api/v1\", \"/api-token-auth/\") resp = requests.post( auth_url, data={ \"username\": username, \"password\": password, }, ) if resp.status_code != 200: raise Exception(\"Invalid username or password provided\") token = resp.json()[\"token\"] headers[\"Authorization\"] = f\"Token {token}\" login() content = requests.get(f\"{base_url}/users\", headers=headers) print(content.json()) We are considering options to provide access to the MIQA API from command line clients or alternative programming interfaces, such as Jupyter notebooks. This document will be updated as these options mature.","title":"Accessing the MIQA API"},{"location":"integration/#additional-miqa-capabilities","text":"If MIQA is close to what your institution needs for its workflow, but some features need adjustment, please contact the MIQA team to discuss customization options. The current state of this document only reflects the needs of MIQA customers so far, but ideas for expansion and enhancements, some of which may apply to your own situation, have been discussed. It is possible to use an alternative vocabulary for scan decision options and artifact options. With custom artifacts, the MIQA neural network would need to be retrained for scan evaluations. MIQA may be repurposed for training a neural network for other kinds of image classification; reviewers can provide manual labeling of large image datasets and those labels can be supplied as ground-truths for the neural network. Managing multiple users allows a small team of coordinating physicians to interact together, and the email features improve the team\u2019s ability to address complicated cases. If your institution has more specific requirements for collaboration, MIQA can be expanded to include such features.","title":"Additional MIQA Capabilities"},{"location":"projects/","text":"Object organization There are a few different standards for organizing files for a medical imaging effort, and some researchers may have unique file structures. MIQA is built to ingest data from almost any file structure and present it in a flexible but uniform object organization. Projects are the top level of the organization tree; they represent whole research efforts. Collaboration and image sharing is set at the project level, so privileged users (superusers and the creator of a project) may set permissions for other users on a project. Each project has a group of collaborators with read-only access and a group of members who may be given tier 1 review access or tier 2 review access. (see Users > User roles for details). Within each project is a set of zero or more experiments, and each experiment has within it a set of zero or more scans. There is one final layer of organization at the sub-scan level, since sometimes multiple image files can be associated with a single scan. A scan object has a set of one or more frames, where each frame is associated with one image file. Frames are intended to represent any sub-scan structure, such as time steps or positions. While frames support the use of sub-scan structures, it is not required to have multiple frames per scan. If a scan only needs one image file associated with it, simply use one frame within the scan. In the case that you have multiple image files to associate with a single Scan, this is when multiple Frames can be made for a single Scan and when Frame ordering becomes applicable. It is up to the project creator how to organize image files in this schema. Projects may be created on the homepage (see Site navigation > Projects homepage for details). Imports and exports There are two ways to add data to a project in MIQA; both are available via the project homepage. The first method is using the \u201cAdd Scans\u201d button, which allows users with edit access on the project (superusers, the project creator, and reviewers) to upload images from their local computer to MIQA. The second method is using imports, which involves reading files on the server machine and ingesting them as objects in MIQA. This distinction is important; imports involve files on the server machine, which is why MIQA restricts the permission to configure imports to only superusers. Imports are configured with import files; only superusers may edit and save the file path which MIQA will use to perform imports. MIQA reads the contents of the import file to understand the desired configuration of objects (experiments, scans, and frames) within a project. To read more about the requirements and format of import files, see the MIQA Administrator Manual.) Any user with edit access on a project may perform an import once a superuser has specified the file path for a project\u2019s import file. It is important that users perform this action with discretion because when an import is performed, all information in the project is overwritten. This includes any decisions made on scans. If a project needs more scans but cannot be overwritten entirely, do not use the import method; it is recommended to use the \u201cAdd Scans\u201d button. Imports are intended to add large volumes of data to a project at its start. A project export is a similar operation but does not alter the project's contents. Instead, exports record the state of a project to a file on the server machine in a format congruent with the import file format. This means it is possible to save the state of a project and bring the project to that state by importing the contents of the export file. Global imports and exports Superusers also have permission to perform global imports and exports, which are cross-project operations. A global import file may specify more than one project to change, and a global export will record the states of all projects. To read more about global imports and exports, see the MIQA Administrator Manual.","title":"Projects in MIQA"},{"location":"projects/#object-organization","text":"There are a few different standards for organizing files for a medical imaging effort, and some researchers may have unique file structures. MIQA is built to ingest data from almost any file structure and present it in a flexible but uniform object organization. Projects are the top level of the organization tree; they represent whole research efforts. Collaboration and image sharing is set at the project level, so privileged users (superusers and the creator of a project) may set permissions for other users on a project. Each project has a group of collaborators with read-only access and a group of members who may be given tier 1 review access or tier 2 review access. (see Users > User roles for details). Within each project is a set of zero or more experiments, and each experiment has within it a set of zero or more scans. There is one final layer of organization at the sub-scan level, since sometimes multiple image files can be associated with a single scan. A scan object has a set of one or more frames, where each frame is associated with one image file. Frames are intended to represent any sub-scan structure, such as time steps or positions. While frames support the use of sub-scan structures, it is not required to have multiple frames per scan. If a scan only needs one image file associated with it, simply use one frame within the scan. In the case that you have multiple image files to associate with a single Scan, this is when multiple Frames can be made for a single Scan and when Frame ordering becomes applicable. It is up to the project creator how to organize image files in this schema. Projects may be created on the homepage (see Site navigation > Projects homepage for details).","title":"Object organization"},{"location":"projects/#imports-and-exports","text":"There are two ways to add data to a project in MIQA; both are available via the project homepage. The first method is using the \u201cAdd Scans\u201d button, which allows users with edit access on the project (superusers, the project creator, and reviewers) to upload images from their local computer to MIQA. The second method is using imports, which involves reading files on the server machine and ingesting them as objects in MIQA. This distinction is important; imports involve files on the server machine, which is why MIQA restricts the permission to configure imports to only superusers. Imports are configured with import files; only superusers may edit and save the file path which MIQA will use to perform imports. MIQA reads the contents of the import file to understand the desired configuration of objects (experiments, scans, and frames) within a project. To read more about the requirements and format of import files, see the MIQA Administrator Manual.) Any user with edit access on a project may perform an import once a superuser has specified the file path for a project\u2019s import file. It is important that users perform this action with discretion because when an import is performed, all information in the project is overwritten. This includes any decisions made on scans. If a project needs more scans but cannot be overwritten entirely, do not use the import method; it is recommended to use the \u201cAdd Scans\u201d button. Imports are intended to add large volumes of data to a project at its start. A project export is a similar operation but does not alter the project's contents. Instead, exports record the state of a project to a file on the server machine in a format congruent with the import file format. This means it is possible to save the state of a project and bring the project to that state by importing the contents of the export file.","title":"Imports and exports"},{"location":"projects/#global-imports-and-exports","text":"Superusers also have permission to perform global imports and exports, which are cross-project operations. A global import file may specify more than one project to change, and a global export will record the states of all projects. To read more about global imports and exports, see the MIQA Administrator Manual.","title":"Global imports and exports"},{"location":"setup/","text":"Specific instructions including commands can be found in prod/README.md . Those instructions will offer a step-by-step guide for commands to run for configuration. This guide is preparatory material for those instructions, which assume you already have some prerequisite components and server experience. Below are some explanations of these prerequisites, which you may need to spend some time to understand and obtain from your organization before you can get started with the production instructions. Server machine preparation One prerequisite to setting up a MIQA instance is a server machine. The commands we supply will be for Linux-based systems. Each organization may have different regulations and processes for obtaining access to a virtual machine that can communicate within the organization. This is the recommended approach to protect the information the database will contain. There are other ways to obtain access to a virtual machine, such as cloud deployment platforms like Amazon Web Services or Microsoft Azure. Whatever approach is taken, this tutorial will assume that the administrator has sudo access on some Linux-based machine with connectivity capabilities. Once you have obtained a server, you can choose a domain name that is appropriate for that machine and which communicates that this domain holds the MIQA instance for your organization. Your choice of domain name will affect the steps of your configuration process, as there are several places in the configuration instructions where the domain name should be inserted. Changing your domain name is not impossible, but will require reconfiguration, so choose something you are comfortable keeping. Docker compose The MIQA system has many component services that work together to offer a complex system. As such, MIQA is set up to utilize docker-compose to manage these services in an efficient, containerized, and easy to use manner. Docker is therefore a prerequisite for simple setup. Some helpful hints for using docker-compose: Avoid using the docker-compose down command to undo a docker-compose up command. Instead, use docker-compose stop when necessary. The up command equates to a \u201cbuild and deploy\u201d mode and the down command equates to \u201cstop deployment and unbuild\u201d, which will destroy the database container resulting in loss of any data present. Contrastively, the stop command equates to just \u201cstop the deployment\u201d. Mail server MIQA has an email feature that allows users to send screenshots of scan slices to colleagues. As such, the MIQA server needs a specialized mail server to send those emails. There are many options for free open source mail servers for enterprise or personal use. Our documentation (see production instructions ) recommends Mailtrap, which only requires an account for their online portal . If your organization has some other standard for mail servers, that option is equally compatible with MIQA. You simply need to obtain the values for host , port , user , and password for the mail server you choose. The production instructions will specify how to use these values in the configuration. SSL certificates For any server to offer secure communication via HTTPS, the server machine needs to have valid certificate files signed by a third party certificate authority. Just like virtual machine allocation, each organization may have different procedures for obtaining signed SSL certificates, so it is recommended to contact the system administration for your organization. In the case that you are setting up a test instance that does not need reliable certificates, a self-signed certificate may be sufficient. The production instructions provide the steps to create or place the certificate files in the correct location.","title":"Setting up MIQA"},{"location":"setup/#server-machine-preparation","text":"One prerequisite to setting up a MIQA instance is a server machine. The commands we supply will be for Linux-based systems. Each organization may have different regulations and processes for obtaining access to a virtual machine that can communicate within the organization. This is the recommended approach to protect the information the database will contain. There are other ways to obtain access to a virtual machine, such as cloud deployment platforms like Amazon Web Services or Microsoft Azure. Whatever approach is taken, this tutorial will assume that the administrator has sudo access on some Linux-based machine with connectivity capabilities. Once you have obtained a server, you can choose a domain name that is appropriate for that machine and which communicates that this domain holds the MIQA instance for your organization. Your choice of domain name will affect the steps of your configuration process, as there are several places in the configuration instructions where the domain name should be inserted. Changing your domain name is not impossible, but will require reconfiguration, so choose something you are comfortable keeping.","title":"Server machine preparation"},{"location":"setup/#docker-compose","text":"The MIQA system has many component services that work together to offer a complex system. As such, MIQA is set up to utilize docker-compose to manage these services in an efficient, containerized, and easy to use manner. Docker is therefore a prerequisite for simple setup. Some helpful hints for using docker-compose: Avoid using the docker-compose down command to undo a docker-compose up command. Instead, use docker-compose stop when necessary. The up command equates to a \u201cbuild and deploy\u201d mode and the down command equates to \u201cstop deployment and unbuild\u201d, which will destroy the database container resulting in loss of any data present. Contrastively, the stop command equates to just \u201cstop the deployment\u201d.","title":"Docker compose"},{"location":"setup/#mail-server","text":"MIQA has an email feature that allows users to send screenshots of scan slices to colleagues. As such, the MIQA server needs a specialized mail server to send those emails. There are many options for free open source mail servers for enterprise or personal use. Our documentation (see production instructions ) recommends Mailtrap, which only requires an account for their online portal . If your organization has some other standard for mail servers, that option is equally compatible with MIQA. You simply need to obtain the values for host , port , user , and password for the mail server you choose. The production instructions will specify how to use these values in the configuration.","title":"Mail server"},{"location":"setup/#ssl-certificates","text":"For any server to offer secure communication via HTTPS, the server machine needs to have valid certificate files signed by a third party certificate authority. Just like virtual machine allocation, each organization may have different procedures for obtaining signed SSL certificates, so it is recommended to contact the system administration for your organization. In the case that you are setting up a test instance that does not need reliable certificates, a self-signed certificate may be sufficient. The production instructions provide the steps to create or place the certificate files in the correct location.","title":"SSL certificates"},{"location":"site/","text":"Projects homepage Projects are the top-level organizational structure in MIQA; as such, the homepage allows users to navigate through projects and view the status of scans within. The screenshot on the right shows a homepage view to a new user who has not been granted access to any existing projects. This user may ask to be added to existing projects or create new projects. Creating a project When the \u201cCreate New Project\u201d button is clicked, the user will be prompted for a name. After this is provided, the page will populate with an empty project. This project can be deleted at any time by the creator or by a superuser with the \u201cDelete Project\u201d button. From this point, the project creator has two options to add content to the project: 1) Provide an import path and an export path which point to file locations on the server machine then click the \u201cImport\u201d button (see Projects > Imports and exports for details) or 2) Click the \u201cAdd Scans\u201d button to create new experiments and supply local image files to those experiments. Project page components Once a project is populated with experiments and scans, the project page will have the above layout with four components (left to right): The project\u2019s settings . This component allows privileged users (superusers and the project creator) to save changes to the import path and export path and delete the project. Other users (members and collaborators on the project) can perform imports and exports with those respective buttons (see Projects > Imports and exports for details). Additionally, the preferred rendering orientation for all scans in that project may also be changed in the project's settings. The default orientation is Left-Posterior-Superior (LPS), which is the standard orientation for neurology scans. The project overview . This donut chart shows the status of the scans in the project. As reviews are made on these scans, the status of the scans will change, and refreshing the page will fetch the updated version of this chart. The goal of any MIQA project is to review all scans, so this illustration helps to track progress towards that goal. The experiment list . This component lists all scans in the project, organized by experiment. Clicking on any of the scans in this list will direct the user to the scan viewing page. This component also allows users with write access (superusers, the project creator, and members) to add scans to the project, either to existing experiments or new ones. The toggle in the upper right corner of this component switches between two modes. The default mode is viewing all scans in the project. Reviewers may wish to toggle to the second mode, which will filter the scan list such that it only shows scans in a state requiring their review (for tier 1 reviewers, this mode will show only unreviewed scans; for tier 2 reviewers, this mode will show only scans needing tier 2 review). Once this mode is toggled, a scan in the list may be chosen and the user will be directed to the image viewing page with only the filtered list of scans queued up. The users added to the project. This component allows privileged users (superusers and the project creator) to grant or revoke access to users. Users can be added to the list of collaborators or the list of members as either a tier 1 reviewer or a tier 2 reviewer. Scan viewing page When any scan is selected from the experiments list for a project, the user is directed to the scan viewing page, where they may view the contents of images associated with that scan. Three image viewers The scan viewing page allows users to examine the contents of each frame\u2019s image file with three viewers that each show one of three axes. By default, these axes are \u201caxial\u201d, \u201csagittal\u201d, and \u201ccoronal\u201d. When the mouse is over one view, several actions are available to the user to manipulate the rendering. Scrolling the mouse will change the slice location along that axis. This action is the same as using the slider above each viewer. Changing the slice on one viewer will affect the location of the corresponding crosshair in the other two viewers. For example, scrolling towards the top slice in the Axial view will bring the red horizontal crosshairs in the Sagittal and Coronal views towards the top of the skull. Clicking and dragging the mouse within one viewer will change the window width and window level of all three renderers. This action is performed across all three renderers so that these values are kept consistent for all three. Changing the window width and window level of the renderers will change the contrast and brightness of the images and make certain types of tissue more or less visible. Holding Ctrl or Alt and performing a click-and-drag within one viewer will zoom in and out on the one viewer. Holding Shift and performing a click-and-drag within one viewer will pan around the image in the one viewer. Clicking the camera icon in the lower right corner of each viewer will capture the state of the viewer in a 512 x 512 screenshot and open a dialog. This dialog (shown to the right) will display the captured screenshot and its filename. The user may either download this as a PNG or JPG file or attach this image to the email draft available next to the logout button (see below section, Additional items on the scan viewing page for details about the email feature). Clicking the full screen icon next to the camera icon in the lower right corner will expand the rendering of one view to use the whole window so that the image can be viewed in more detail. Control panel Below the three image viewers on the scan viewing page, there is a control panel for the user to manipulate the viewers and view contextual details about the scan. Users with a reviewer role may also save decisions about a scan in the control panel. The first portion displays the project and experiment information, including any notes taken about the experiment. It also contains toggle buttons relating to the crosshairs shown on the viewers. Turning \u201cdisplay crosshairs\u201d off will remove the crosshairs from the renderings. The second toggle, which is on by default, controls whether the current slice location (as indicated by the crosshairs) is stored with a decision when it is submitted. If this control is off, no location information will be saved with a decision. If this control is on when a reviewer saves a decision, others may view where in the image the reviewer was looking when they submitted their decision. The second portion displays the current scan and frame information, including arrow buttons to navigate to previous and next scans and frames. Using the up and down arrow buttons or arrow keys navigates to the previous and next scans in the experiment. Using the left and right arrow buttons or arrow keys navigates to the previous and next frames in the scan. If there is only one frame in a scan, the left and right buttons are disabled. This portion of the control panel also includes finer controls for the window width and window level of the three renderers, as well as a section to view the previously submitted decisions and comments for the current scan. See Referencing others\u2019 decisions for details. The third portion is solely for users who have permission to save decisions for scans in a project (superusers, the project creator, and reviewers). This section is blank for collaborators, who cannot save scan decisions. See Saving a decision for details. Exclusive edit access for an experiment To ensure that no two reviewers are submitting decisions on the same experiment at the same time with risk of one overwriting the other\u2019s work, edit access for an experiment must be claimed by one user at a time. This means if one reviewer is currently working with an experiment, a second reviewer will not see the usual contents of the third portion of the control panel, instead seeing the image to the right. If an experiment is currently locked by a user, that user\u2019s icon will appear next to the experiment name where it appears in the experiment list and the first portion of the control panel. Saving a decision The third portion of the control panel is dedicated to saving decisions for a scan. Tier one reviewers will have the options \u201cUsable\u201d or \u201cQuestionable\u201d (shown on the left), whereas tier two reviewers will have the options \u201cUsable\u201d, \u201cUsable-extra\u201d, or \u201cUnusable\u201d (shown on the right). All reviewers may leave a comment with their decision on a scan; comments must be supplied for any decision that is not \u201cUsable\u201d. All reviewers may also specify the presence or absence of certain artifacts in the scan with a set of tags. This allows for specificity about faults in scans in a standardized manner. Clicking a tag once fills the tag red to indicate that the artifact is present in the scan. Clicking it once more crosses through the text to indicate that the artifact is absent. Clicking the tag a third time will put that tag back in an unspecified state. When the tag is not specified as either present or absent by the reviewer, it will appear either as normal black text or it will appear as red text with a question mark when the last evaluation suggests that the artifact may be present. The last evaluation may either be a previous decision by another reviewer or the automatic evaluation provided by the neural network on the server (see Referencing the automatic suggestion for details). This state (shown on the \u201cpartial coverage\u201d tag in the above example) is only a suggestion, and only the filled red tags are saved as \u201cpresent\u201d artifacts. Clicking the suggestions to fill them red will confirm that the user agrees with the suggestion, whereas clicking the suggestions twice to cross through the text indicates that the user disagrees with the suggestion. Leaving them in the suggested state is neither a statement of agreement nor disagreement. Referencing the automatic suggestion MIQA comes with a built-in neural network and automatic suggestion feature that will inform reviewers about possible faults in a given scan. These automatic evaluations are run when scans are imported into a project. The neural network returns confidence values pertaining to the presence of the nine scan artifacts, as well as an \u201coverall quality\u201d metric for the scan derived from the nine confidence values and a metric for the presence of normal variants in the scan. The results of the automatic evaluation are used to suggest the presence of the nine artifacts to reviewers of the scan (see Saving a decision for details). The full results of the automatic evaluation are available by hovering over the auto evaluation icon (displayed as three bars, as shown to the right) above the artifact selection tags in the control panel. In the example on the right, the \u201cfull brain coverage\u201d confidence score is low (below 40%), so the automatic evaluation will suggest that the \u201cpartial coverage\u201d artifact is likely present in this scan (as seen in the above section). Referencing others\u2019 decisions Once one decision has been saved for a scan, future reviewers may wish to take this evaluation into account on their own decision. As such, all previous decisions made on a scan are available in the middle portion of the control panel. In the above example, a previous reviewer marked this scan as \u201cQuestionable\u201d, marking that the \u201cmisalignment\u201d artifact was present and including a comment to explain the decision. Notice how the \u201cmisalignment\u201d artifact tag is now suggested to the current reviewer. The previous decisions displayed in this box are shown in reverse chronological order, with the most recent decision on top. Each row in this display represents a decision saved by a reviewer, and there are several parts to each row: The user icon . This is the icon of the reviewer that submitted the review. Hovering over this icon will display the username of this reviewer. The decision in shorthand . If the reviewer decides that the scan is \u201cunusable\u201d the shorthand will be a red \u201c(UN)\u201d. If the reviewer decides that the scan is \u201cusable\u201d the shorthand will be a green \u201c(U)\u201d. \u201cQuestionable\u201d is displayed as a gray \u201c(Q?)\u201d, and \u201cusable-extra\u201d is displayed as a gray \u201c(UE)\u201d. The crosshairs icon . If the reviewer had the \u201cStore crosshairs with decision\u201d option enabled when they saved their decision, the crosshairs icon will appear with the decision. Clicking this icon will change the slices shown in the three viewer components such that the user sees where in the image the reviewer was looking when the decision was saved. This enables reviewers to make comments about a specific part of the image for others to consider. The comment . This text is the comment made with the decision. If a reviewer marks a scan as \u201cusable\u201d, a comment is not required. The present artifact tags . These tags display the shorthand (the first three characters) of the artifact tags that the reviewer marked as present. These tags will be suggested to the next reviewer. Hovering over the tag will display the full name of the artifact. The date . This is the date on which the decision was saved. Additional items on the scan viewing page The context sidebar . The left edge of this page includes a sidebar that expands upon hovering. This sidebar shows the same content as the experiments list on the project page. This acts as a navigational tool as the user continues down the list of scans in each experiment. The user\u2019s icon will be shown next to the experiment they are currently viewing to represent that they have exclusive edit access (see Control Panel > Exclusive edit access for an experiment for details). Clicking any scan in this list will bring the user to that scan. Note that the review mode toggle exists here, too, so the user may filter/unfilter the queue of scans to flip through. Additional toolbar items. The toolbar at the top includes a link back to the projects page, as well as the logout button, user information, and two additional buttons only visible on the scan viewing page: a. The keyboard shortcuts dialog . The keyboard icon opens a simple dialog with a table describing all the keyboard shortcuts available for use on the scan viewing page. b. The email draft dialog . The envelope icon opens a dialog that allows the user to draft an email to a colleague in regards to the current scan. This is especially useful in combination with the screenshot feature on the three image viewers (see previous section). A user can attach multiple screenshots of the scan to a single email draft.","title":"Navigating the site"},{"location":"site/#projects-homepage","text":"Projects are the top-level organizational structure in MIQA; as such, the homepage allows users to navigate through projects and view the status of scans within. The screenshot on the right shows a homepage view to a new user who has not been granted access to any existing projects. This user may ask to be added to existing projects or create new projects.","title":"Projects homepage"},{"location":"site/#creating-a-project","text":"When the \u201cCreate New Project\u201d button is clicked, the user will be prompted for a name. After this is provided, the page will populate with an empty project. This project can be deleted at any time by the creator or by a superuser with the \u201cDelete Project\u201d button. From this point, the project creator has two options to add content to the project: 1) Provide an import path and an export path which point to file locations on the server machine then click the \u201cImport\u201d button (see Projects > Imports and exports for details) or 2) Click the \u201cAdd Scans\u201d button to create new experiments and supply local image files to those experiments.","title":"Creating a project"},{"location":"site/#project-page-components","text":"Once a project is populated with experiments and scans, the project page will have the above layout with four components (left to right): The project\u2019s settings . This component allows privileged users (superusers and the project creator) to save changes to the import path and export path and delete the project. Other users (members and collaborators on the project) can perform imports and exports with those respective buttons (see Projects > Imports and exports for details). Additionally, the preferred rendering orientation for all scans in that project may also be changed in the project's settings. The default orientation is Left-Posterior-Superior (LPS), which is the standard orientation for neurology scans. The project overview . This donut chart shows the status of the scans in the project. As reviews are made on these scans, the status of the scans will change, and refreshing the page will fetch the updated version of this chart. The goal of any MIQA project is to review all scans, so this illustration helps to track progress towards that goal. The experiment list . This component lists all scans in the project, organized by experiment. Clicking on any of the scans in this list will direct the user to the scan viewing page. This component also allows users with write access (superusers, the project creator, and members) to add scans to the project, either to existing experiments or new ones. The toggle in the upper right corner of this component switches between two modes. The default mode is viewing all scans in the project. Reviewers may wish to toggle to the second mode, which will filter the scan list such that it only shows scans in a state requiring their review (for tier 1 reviewers, this mode will show only unreviewed scans; for tier 2 reviewers, this mode will show only scans needing tier 2 review). Once this mode is toggled, a scan in the list may be chosen and the user will be directed to the image viewing page with only the filtered list of scans queued up. The users added to the project. This component allows privileged users (superusers and the project creator) to grant or revoke access to users. Users can be added to the list of collaborators or the list of members as either a tier 1 reviewer or a tier 2 reviewer.","title":"Project page components"},{"location":"site/#scan-viewing-page","text":"When any scan is selected from the experiments list for a project, the user is directed to the scan viewing page, where they may view the contents of images associated with that scan.","title":"Scan viewing page"},{"location":"site/#three-image-viewers","text":"The scan viewing page allows users to examine the contents of each frame\u2019s image file with three viewers that each show one of three axes. By default, these axes are \u201caxial\u201d, \u201csagittal\u201d, and \u201ccoronal\u201d. When the mouse is over one view, several actions are available to the user to manipulate the rendering. Scrolling the mouse will change the slice location along that axis. This action is the same as using the slider above each viewer. Changing the slice on one viewer will affect the location of the corresponding crosshair in the other two viewers. For example, scrolling towards the top slice in the Axial view will bring the red horizontal crosshairs in the Sagittal and Coronal views towards the top of the skull. Clicking and dragging the mouse within one viewer will change the window width and window level of all three renderers. This action is performed across all three renderers so that these values are kept consistent for all three. Changing the window width and window level of the renderers will change the contrast and brightness of the images and make certain types of tissue more or less visible. Holding Ctrl or Alt and performing a click-and-drag within one viewer will zoom in and out on the one viewer. Holding Shift and performing a click-and-drag within one viewer will pan around the image in the one viewer. Clicking the camera icon in the lower right corner of each viewer will capture the state of the viewer in a 512 x 512 screenshot and open a dialog. This dialog (shown to the right) will display the captured screenshot and its filename. The user may either download this as a PNG or JPG file or attach this image to the email draft available next to the logout button (see below section, Additional items on the scan viewing page for details about the email feature). Clicking the full screen icon next to the camera icon in the lower right corner will expand the rendering of one view to use the whole window so that the image can be viewed in more detail.","title":"Three image viewers"},{"location":"site/#control-panel","text":"Below the three image viewers on the scan viewing page, there is a control panel for the user to manipulate the viewers and view contextual details about the scan. Users with a reviewer role may also save decisions about a scan in the control panel. The first portion displays the project and experiment information, including any notes taken about the experiment. It also contains toggle buttons relating to the crosshairs shown on the viewers. Turning \u201cdisplay crosshairs\u201d off will remove the crosshairs from the renderings. The second toggle, which is on by default, controls whether the current slice location (as indicated by the crosshairs) is stored with a decision when it is submitted. If this control is off, no location information will be saved with a decision. If this control is on when a reviewer saves a decision, others may view where in the image the reviewer was looking when they submitted their decision. The second portion displays the current scan and frame information, including arrow buttons to navigate to previous and next scans and frames. Using the up and down arrow buttons or arrow keys navigates to the previous and next scans in the experiment. Using the left and right arrow buttons or arrow keys navigates to the previous and next frames in the scan. If there is only one frame in a scan, the left and right buttons are disabled. This portion of the control panel also includes finer controls for the window width and window level of the three renderers, as well as a section to view the previously submitted decisions and comments for the current scan. See Referencing others\u2019 decisions for details. The third portion is solely for users who have permission to save decisions for scans in a project (superusers, the project creator, and reviewers). This section is blank for collaborators, who cannot save scan decisions. See Saving a decision for details.","title":"Control panel"},{"location":"site/#exclusive-edit-access-for-an-experiment","text":"To ensure that no two reviewers are submitting decisions on the same experiment at the same time with risk of one overwriting the other\u2019s work, edit access for an experiment must be claimed by one user at a time. This means if one reviewer is currently working with an experiment, a second reviewer will not see the usual contents of the third portion of the control panel, instead seeing the image to the right. If an experiment is currently locked by a user, that user\u2019s icon will appear next to the experiment name where it appears in the experiment list and the first portion of the control panel.","title":"Exclusive edit access for an experiment"},{"location":"site/#saving-a-decision","text":"The third portion of the control panel is dedicated to saving decisions for a scan. Tier one reviewers will have the options \u201cUsable\u201d or \u201cQuestionable\u201d (shown on the left), whereas tier two reviewers will have the options \u201cUsable\u201d, \u201cUsable-extra\u201d, or \u201cUnusable\u201d (shown on the right). All reviewers may leave a comment with their decision on a scan; comments must be supplied for any decision that is not \u201cUsable\u201d. All reviewers may also specify the presence or absence of certain artifacts in the scan with a set of tags. This allows for specificity about faults in scans in a standardized manner. Clicking a tag once fills the tag red to indicate that the artifact is present in the scan. Clicking it once more crosses through the text to indicate that the artifact is absent. Clicking the tag a third time will put that tag back in an unspecified state. When the tag is not specified as either present or absent by the reviewer, it will appear either as normal black text or it will appear as red text with a question mark when the last evaluation suggests that the artifact may be present. The last evaluation may either be a previous decision by another reviewer or the automatic evaluation provided by the neural network on the server (see Referencing the automatic suggestion for details). This state (shown on the \u201cpartial coverage\u201d tag in the above example) is only a suggestion, and only the filled red tags are saved as \u201cpresent\u201d artifacts. Clicking the suggestions to fill them red will confirm that the user agrees with the suggestion, whereas clicking the suggestions twice to cross through the text indicates that the user disagrees with the suggestion. Leaving them in the suggested state is neither a statement of agreement nor disagreement.","title":"Saving a decision"},{"location":"site/#referencing-the-automatic-suggestion","text":"MIQA comes with a built-in neural network and automatic suggestion feature that will inform reviewers about possible faults in a given scan. These automatic evaluations are run when scans are imported into a project. The neural network returns confidence values pertaining to the presence of the nine scan artifacts, as well as an \u201coverall quality\u201d metric for the scan derived from the nine confidence values and a metric for the presence of normal variants in the scan. The results of the automatic evaluation are used to suggest the presence of the nine artifacts to reviewers of the scan (see Saving a decision for details). The full results of the automatic evaluation are available by hovering over the auto evaluation icon (displayed as three bars, as shown to the right) above the artifact selection tags in the control panel. In the example on the right, the \u201cfull brain coverage\u201d confidence score is low (below 40%), so the automatic evaluation will suggest that the \u201cpartial coverage\u201d artifact is likely present in this scan (as seen in the above section).","title":"Referencing the automatic suggestion"},{"location":"site/#referencing-others-decisions","text":"Once one decision has been saved for a scan, future reviewers may wish to take this evaluation into account on their own decision. As such, all previous decisions made on a scan are available in the middle portion of the control panel. In the above example, a previous reviewer marked this scan as \u201cQuestionable\u201d, marking that the \u201cmisalignment\u201d artifact was present and including a comment to explain the decision. Notice how the \u201cmisalignment\u201d artifact tag is now suggested to the current reviewer. The previous decisions displayed in this box are shown in reverse chronological order, with the most recent decision on top. Each row in this display represents a decision saved by a reviewer, and there are several parts to each row: The user icon . This is the icon of the reviewer that submitted the review. Hovering over this icon will display the username of this reviewer. The decision in shorthand . If the reviewer decides that the scan is \u201cunusable\u201d the shorthand will be a red \u201c(UN)\u201d. If the reviewer decides that the scan is \u201cusable\u201d the shorthand will be a green \u201c(U)\u201d. \u201cQuestionable\u201d is displayed as a gray \u201c(Q?)\u201d, and \u201cusable-extra\u201d is displayed as a gray \u201c(UE)\u201d. The crosshairs icon . If the reviewer had the \u201cStore crosshairs with decision\u201d option enabled when they saved their decision, the crosshairs icon will appear with the decision. Clicking this icon will change the slices shown in the three viewer components such that the user sees where in the image the reviewer was looking when the decision was saved. This enables reviewers to make comments about a specific part of the image for others to consider. The comment . This text is the comment made with the decision. If a reviewer marks a scan as \u201cusable\u201d, a comment is not required. The present artifact tags . These tags display the shorthand (the first three characters) of the artifact tags that the reviewer marked as present. These tags will be suggested to the next reviewer. Hovering over the tag will display the full name of the artifact. The date . This is the date on which the decision was saved.","title":"Referencing others\u2019 decisions"},{"location":"site/#additional-items-on-the-scan-viewing-page","text":"The context sidebar . The left edge of this page includes a sidebar that expands upon hovering. This sidebar shows the same content as the experiments list on the project page. This acts as a navigational tool as the user continues down the list of scans in each experiment. The user\u2019s icon will be shown next to the experiment they are currently viewing to represent that they have exclusive edit access (see Control Panel > Exclusive edit access for an experiment for details). Clicking any scan in this list will bring the user to that scan. Note that the review mode toggle exists here, too, so the user may filter/unfilter the queue of scans to flip through. Additional toolbar items. The toolbar at the top includes a link back to the projects page, as well as the logout button, user information, and two additional buttons only visible on the scan viewing page: a. The keyboard shortcuts dialog . The keyboard icon opens a simple dialog with a table describing all the keyboard shortcuts available for use on the scan viewing page. b. The email draft dialog . The envelope icon opens a dialog that allows the user to draft an email to a colleague in regards to the current scan. This is especially useful in combination with the screenshot feature on the three image viewers (see previous section). A user can attach multiple screenshots of the scan to a single email draft.","title":"Additional items on the scan viewing page"},{"location":"users/","text":"Signing up The MIQA login screen has a button in the upper right corner that allows new users to request an account. This button leads to a form where a new user can provide their email address and write a new password for their account. After submitting this form, a verification email will be sent to the email address that was provided. The new user must click the verification link in this email to verify their identity. Once the email verification process has been completed, a second email will be sent to the MIQA administration (all users with \u201csuperuser\u201d status) requesting manual account activation on behalf of the new user. A new user of MIQA will not be able to log in until an administrator activates the new account. This process ensures that the data on any instance of MIQA is only made available to trusted persons. User roles All users in MIQA have both a global role and a role on every project to which they are added. Possible roles are as follows: Global roles - Superuser - Normal user Project Roles - Creator - Tier 2 reviewer - Tier 1 Reviewer - Collaborator At the global level, a user is either a normal user or a \u201csuperuser\u201d with heightened privileges and additional responsibilities. Superusers should be trusted individuals, as they are given the following privileges: Edit the import path and export path on projects Perform imports and exports on projects Delete projects Grant/revoke project roles to/from other users Automatically have at least tier 1 reviewer privileges on every project Claim edit access on any Experiment (as long as the experiment is not currently being edited) Approve the accounts of new users once the email for that new account has been confirmed Superusers have the responsibility to upkeep the MIQA instance and resolve any issues that may arise. Normal users may sometimes rely on the action of superusers, so it is important that the identities of the superusers are known to normal users such that superusers may be contacted in case of issues. In addition to a user\u2019s global role, each user may be assigned a role per project. Projects are the basic organizational structure in MIQA that act as buckets for data separation; this is how protected data can stay private to a group of selected users. The data in a project can only be seen by users explicitly added to that project (and superusers, implicitly). A user can be added to a project with read-only permission (as a collaborator) or with read-write permissions (as a member). Collaborators cannot edit notes or submit reviews of scans, but they may view the data in the same manner that members can. Members have the ability and responsibility to submit reviews of scans in the project until a final decision has been made on every scan in the project. The group of members on a project has a two-tier structure to encourage cooperation on decisions and enforce that final decisions are only made by knowledgeable reviewers. Tier 1 reviewers enact a first round of review, marking scans as either \u201cusable\u201d or \u201cquestionable.\u201d Tier 2 reviewers are entrusted to make a final decision on questionable scans by marking them as either \u201cusable,\u201d \u201cunusable,\u201d or \u201cusable-extra.\u201d A scan is considered \"unreviewed\" when no decisions exist for that scan; it is not considered \"complete\" until a decision has been made by a tier 2 reviewer. If a scan only has decisions made by tier 1 reviewers, it is considered as \"needs tier 2 review\". NOTES If a project has no need to differentiate between reviewer tiers, simply set all reviewers as tier 2. All Projects implicitly include all superusers as tier 1 reviewers, since superusers automatically have edit permissions on every project. Normal users will not be able to view or interact with a project's settings (i.e. importing and exporting features).","title":"Users in MIQA"},{"location":"users/#signing-up","text":"The MIQA login screen has a button in the upper right corner that allows new users to request an account. This button leads to a form where a new user can provide their email address and write a new password for their account. After submitting this form, a verification email will be sent to the email address that was provided. The new user must click the verification link in this email to verify their identity. Once the email verification process has been completed, a second email will be sent to the MIQA administration (all users with \u201csuperuser\u201d status) requesting manual account activation on behalf of the new user. A new user of MIQA will not be able to log in until an administrator activates the new account. This process ensures that the data on any instance of MIQA is only made available to trusted persons.","title":"Signing up"},{"location":"users/#user-roles","text":"All users in MIQA have both a global role and a role on every project to which they are added. Possible roles are as follows: Global roles - Superuser - Normal user Project Roles - Creator - Tier 2 reviewer - Tier 1 Reviewer - Collaborator At the global level, a user is either a normal user or a \u201csuperuser\u201d with heightened privileges and additional responsibilities. Superusers should be trusted individuals, as they are given the following privileges: Edit the import path and export path on projects Perform imports and exports on projects Delete projects Grant/revoke project roles to/from other users Automatically have at least tier 1 reviewer privileges on every project Claim edit access on any Experiment (as long as the experiment is not currently being edited) Approve the accounts of new users once the email for that new account has been confirmed Superusers have the responsibility to upkeep the MIQA instance and resolve any issues that may arise. Normal users may sometimes rely on the action of superusers, so it is important that the identities of the superusers are known to normal users such that superusers may be contacted in case of issues. In addition to a user\u2019s global role, each user may be assigned a role per project. Projects are the basic organizational structure in MIQA that act as buckets for data separation; this is how protected data can stay private to a group of selected users. The data in a project can only be seen by users explicitly added to that project (and superusers, implicitly). A user can be added to a project with read-only permission (as a collaborator) or with read-write permissions (as a member). Collaborators cannot edit notes or submit reviews of scans, but they may view the data in the same manner that members can. Members have the ability and responsibility to submit reviews of scans in the project until a final decision has been made on every scan in the project. The group of members on a project has a two-tier structure to encourage cooperation on decisions and enforce that final decisions are only made by knowledgeable reviewers. Tier 1 reviewers enact a first round of review, marking scans as either \u201cusable\u201d or \u201cquestionable.\u201d Tier 2 reviewers are entrusted to make a final decision on questionable scans by marking them as either \u201cusable,\u201d \u201cunusable,\u201d or \u201cusable-extra.\u201d A scan is considered \"unreviewed\" when no decisions exist for that scan; it is not considered \"complete\" until a decision has been made by a tier 2 reviewer. If a scan only has decisions made by tier 1 reviewers, it is considered as \"needs tier 2 review\". NOTES If a project has no need to differentiate between reviewer tiers, simply set all reviewers as tier 2. All Projects implicitly include all superusers as tier 1 reviewers, since superusers automatically have edit permissions on every project. Normal users will not be able to view or interact with a project's settings (i.e. importing and exporting features).","title":"User roles"}]}